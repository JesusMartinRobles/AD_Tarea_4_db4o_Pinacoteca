/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import com.db4o.Db4oEmbedded;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import java.io.File;
import javax.swing.JOptionPane;
import com.db4o.query.Query;

/**
 * Clase frmPinacoteca que contiene la interfaz gráfica del gestor de pinacoteca
 * y sus métodos para realizar operaciones con la base de datos de la pinacoteca
 * (pinacoteca.db4o) y sus clases Cuadro y Pintor
 *
 * @author Jesus
 */
public class frmPinacoteca extends javax.swing.JFrame {

    File f = new File("pinacoteca.db4o"); // Archivo de la base de datos
    ObjectContainer db = Db4oEmbedded.openFile(f.getAbsolutePath()); // Base de datos

    /**
     * Creates new form frmPinacoteca
     */
    public frmPinacoteca() {
        initComponents();
        this.setTitle("Gestor de Pinacoteca"); // Título de la ventana
        this.setLocationRelativeTo(null); // Centrar la ventana
    }

    // Método para obtener el pintor de la base de datos por el id
    public Pintor getPintor(int id) {
        ObjectSet<Pintor> result = db.queryByExample(new Pintor(id, null, null, 0, null));
        Pintor pintor = null;
        if (result.hasNext()) {
            pintor = result.next();
        }
        return pintor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNumCatalogo = new javax.swing.JTextField();
        txtTitulo = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        txtEstado = new javax.swing.JTextField();
        txtTipo = new javax.swing.JTextField();
        txtIdPintorCuadro = new javax.swing.JTextField();
        btnAgregarCuadro = new javax.swing.JButton();
        btnEliminarCuadro = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtIdPintor = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtNacionalidad = new javax.swing.JTextField();
        txtEstilo = new javax.swing.JTextField();
        btnAgregarPintor = new javax.swing.JButton();
        btnEliminarPintor = new javax.swing.JButton();
        txtAnioNacim = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jComboBoxOperaciones = new javax.swing.JComboBox<>();
        btnRealizarOperacion = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultados = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Gestor de Pinacoteca");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Cuadro"));

        jLabel2.setText("Nº Catálogo:");

        jLabel3.setText("Título:");

        jLabel4.setText("Precio:");

        jLabel5.setText("Estado:");

        jLabel6.setText("Tipo:");

        jLabel7.setText("Id Pintor:");

        btnAgregarCuadro.setText("Agregar");
        btnAgregarCuadro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCuadroActionPerformed(evt);
            }
        });

        btnEliminarCuadro.setText("Eliminar");
        btnEliminarCuadro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCuadroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTitulo)
                            .addComponent(txtEstado)
                            .addComponent(txtTipo)
                            .addComponent(txtIdPintorCuadro)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNumCatalogo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 81, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAgregarCuadro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminarCuadro)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNumCatalogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtIdPintorCuadro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarCuadro)
                    .addComponent(btnEliminarCuadro))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Pintor"));

        jLabel8.setText("Id Pintor:");

        jLabel9.setText("Nombre:");

        jLabel10.setText("Nacionalidad:");

        jLabel11.setText("Año Nacim:");

        jLabel12.setText("Estilo:");

        btnAgregarPintor.setText("Agregar");
        btnAgregarPintor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPintorActionPerformed(evt);
            }
        });

        btnEliminarPintor.setText("Eliminar");
        btnEliminarPintor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPintorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtIdPintor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 116, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEstilo)
                            .addComponent(txtNacionalidad)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtAnioNacim, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAgregarPintor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminarPintor)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtIdPintor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtAnioNacim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEstilo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarPintor)
                    .addComponent(btnEliminarPintor))
                .addContainerGap())
        );

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 351, Short.MAX_VALUE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnSalir))
                .addContainerGap())
        );

        jComboBoxOperaciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Consulta todos los cuadros mostrando sus campos ordenandos por tipo.", "Mostrar todos los cuadros de un determinado pintor.", "Mostrar todos los cuadros de pintores de una nacionalidad determinada.", "Pedir dos precios y consultar los cuadros cuyo valor se encuentre entre los precios introducidos.", "Aumenta los precios de todos los cuadros en un 10%." }));

        btnRealizarOperacion.setText("Realizar operación");
        btnRealizarOperacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarOperacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRealizarOperacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRealizarOperacion))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados"));

        txtResultados.setColumns(20);
        txtResultados.setRows(5);
        jScrollPane1.setViewportView(txtResultados);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarCuadroActionPerformed(java.awt.event.ActionEvent evt) {
        // Si la base de datos está cerrada, abrirla
        if (db.close()) {
            db = Db4oEmbedded.openFile(f.getAbsolutePath());
        }
        try {
            // Comprobar si el numero de catalogo ya existe
            ObjectSet<Cuadro> result = db.queryByExample(new Cuadro(Integer.parseInt(txtNumCatalogo.getText()), null, 0, null, null, null));
            // Si existe, mostrar mensaje
            if (result.hasNext()) {
                txtResultados.setText("Ya existe un cuadro con ese número de catálogo");
                // Si no existe, almacenar el cuadro
            } else if (txtNumCatalogo.getText().equals("") || txtTitulo.getText().equals("") || txtPrecio.getText().equals("") || txtEstado.getText().equals("") || txtTipo.getText().equals("") || txtIdPintorCuadro.getText().equals("")) {
                txtResultados.setText("Faltan datos por introducir");
            } else {
                int numCatalogo = Integer.parseInt(txtNumCatalogo.getText()); // Número de catálogo
                String titulo = txtTitulo.getText(); // Título del cuadro
                double precio = Double.parseDouble(txtPrecio.getText()); // Precio del cuadro
                String estado = txtEstado.getText(); // Estado del cuadro
                String tipo = txtTipo.getText(); // Tipo de cuadro
                Pintor pintor = getPintor(Integer.parseInt(txtIdPintorCuadro.getText())); // Pintor del cuadro
                Cuadro cuadro = new Cuadro(numCatalogo, titulo, precio, estado, tipo, pintor); // Crear el objeto Cuadro
                db.store(cuadro); // Almacenar el cuadro en la base de datos
                db.commit(); // Confirmar la transacción
                txtResultados.setText("Cuadro almacenado correctamente"); // Mostrar mensaje
                // Limpiar los campos
                txtNumCatalogo.setText("");
                txtTitulo.setText("");
                txtPrecio.setText("");
                txtEstado.setText("");
                txtTipo.setText("");
                txtIdPintorCuadro.setText("");
            }
        } catch (NumberFormatException e) { // Si se produce una excepción de tipo NumberFormatException
            txtResultados.setText("Error: los datos introducidos no son válidos.");
            db.rollback(); // Deshacer la transacción
        } catch (Exception e) { // Si se produce una excepción de otro tipo
            txtResultados.setText("Error: " + e.getMessage());
            db.rollback(); // Deshacer la transacción
        } finally {
            db.close(); // Cerrar la base de datos
        }
    }

    private void btnEliminarCuadroActionPerformed(java.awt.event.ActionEvent evt) {
        // Si la base de datos está cerrada, abrirla
        if (db.close()) {
            db = Db4oEmbedded.openFile(f.getAbsolutePath());
        }
        try {
            // Comprobar si el numero de catalogo ya existe
            if (txtNumCatalogo.getText().equals("")) {
                txtResultados.setText("Falta el número de catálogo por introducir");
            } else { // Si existe, eliminar el cuadro
                int numCatalogo = Integer.parseInt(txtNumCatalogo.getText()); // Número de catálogo
                ObjectSet<Cuadro> result = db.queryByExample(new Cuadro(numCatalogo, null, 0, null, null, null)); // Buscar el cuadro por el número de catálogo
                if (result.hasNext()) { // Si existe, eliminar el cuadro
                    Cuadro cuadro = result.next(); // Obtener el cuadro
                    db.delete(cuadro); // Eliminar el cuadro de la base de datos
                    db.commit(); // Confirmar la transacción
                    txtResultados.setText("Cuadro eliminado correctamente");
                    txtNumCatalogo.setText("");
                } else { // Si no existe, mostrar mensaje
                    txtResultados.setText("No existe un cuadro con ese número de catálogo");
                }
            }
        } catch (NumberFormatException e) { // Si se produce una excepción de tipo NumberFormatException
            txtResultados.setText("Error: los datos introducidos no son válidos.");
            db.rollback(); // Deshacer la transacción
        } catch (Exception e) { // Si se produce una excepción de otro tipo
            txtResultados.setText("Error: " + e.getMessage());
            db.rollback(); // Deshacer la transacción
        } finally {
            db.close(); // Cerrar la base de datos
        }
    }

    private void btnAgregarPintorActionPerformed(java.awt.event.ActionEvent evt) {
        // Si la base de datos está cerrada, abrirla
        if (db.close()) {
            db = Db4oEmbedded.openFile(f.getAbsolutePath());
        }
        try {
            // Comprobar si el id del pintor ya existe
            if (txtIdPintor.getText().equals("") || txtNombre.getText().equals("") || txtNacionalidad.getText().equals("") || txtAnioNacim.getText().equals("") || txtEstilo.getText().equals("")) {
                txtResultados.setText("Faltan datos por introducir");
            } else { // Si no existe, almacenar el pintor
                int idPintor = Integer.parseInt(txtIdPintor.getText()); // Identificador del pintor
                String nombre = txtNombre.getText(); // Nombre del pintor
                String nacionalidad = txtNacionalidad.getText(); // Nacionalidad del pintor
                int anioNacim = Integer.parseInt(txtAnioNacim.getText()); // Año de nacimiento del pintor
                String estilo = txtEstilo.getText(); // Estilo del pintor
                Pintor pintor = new Pintor(idPintor, nombre, nacionalidad, anioNacim, estilo); // Crear el objeto Pintor
                db.store(pintor); // Almacenar el pintor en la base de datos
                db.commit(); // Confirmar la transacción
                txtResultados.setText("Pintor almacenado correctamente"); // Mostrar mensaje
                // Limpiar los campos
                txtIdPintor.setText("");
                txtNombre.setText("");
                txtNacionalidad.setText("");
                txtAnioNacim.setText("");
                txtEstilo.setText("");
            }
        } catch (NumberFormatException e) { // Si se produce una excepción de tipo NumberFormatException
            txtResultados.setText("Error: los datos introducidos no son válidos.");
            db.rollback(); // Deshacer la transacción
        } catch (Exception e) { // Si se produce una excepción de otro tipo
            txtResultados.setText("Error: " + e.getMessage());
            db.rollback(); // Deshacer la transacción
        } finally {
            db.close(); // Cerrar la base de datos
        }
    }

    private void btnEliminarPintorActionPerformed(java.awt.event.ActionEvent evt) {
        // Si la base de datos está cerrada, abrirla
        if (db.close()) {
            db = Db4oEmbedded.openFile(f.getAbsolutePath());
        }
        try {
            // Comprobar si el id del pintor ya existe
            if (txtIdPintor.getText().equals("")) {
                txtResultados.setText("Falta el id del pintor por introducir");
            } else { // Si existe, eliminar el pintor
                int idPintor = Integer.parseInt(txtIdPintor.getText()); // Identificador del pintor
                ObjectSet<Pintor> result = db.queryByExample(new Pintor(idPintor, null, null, 0, null)); // Buscar el pintor por el id
                if (result.hasNext()) { // Si existe, eliminar el pintor
                    Pintor pintor = result.next(); // Obtener el pintor

                    // Comprobar si el pintor tiene cuadros
                    ObjectSet<Cuadro> cuadros = db.queryByExample(new Cuadro(0, null, 0, null, null, pintor));
                    if (cuadros.hasNext()) { // Si el pintor tiene cuadros, mostrar mensaje
                        txtResultados.setText("El pintor tiene cuadros en la pinacoteca, no se puede eliminar");
                    } else { // Si el pintor no tiene cuadros, eliminar el pintor
                        db.delete(pintor); // Eliminar el pintor de la base de datos
                        db.commit(); // Confirmar la transacción
                        txtResultados.setText("Pintor eliminado correctamente");
                        txtIdPintor.setText("");
                    }
                } else { // Si no existe, mostrar mensaje
                    txtResultados.setText("No existe un pintor con ese id");
                }
            }
        } catch (NumberFormatException e) { // Si se produce una excepción de tipo NumberFormatException
            txtResultados.setText("Error: los datos introducidos no son válidos.");
            db.rollback(); // Deshacer la transacción
        } catch (Exception e) { // Si se produce una excepción de otro tipo
            txtResultados.setText("Error: " + e.getMessage());
            db.rollback(); // Deshacer la transacción
        } finally {
            db.close(); // Cerrar la base de datos
        }
    }

    private void btnRealizarOperacionActionPerformed(java.awt.event.ActionEvent evt) {
        // Si la base de datos está cerrada, abrirla
        if (db.close()) {
            db = Db4oEmbedded.openFile(f.getAbsolutePath());
        }
        try {
            // Realizar la operación seleccionada
            String operacion = jComboBoxOperaciones.getSelectedItem().toString(); // Operación seleccionada
            switch (operacion) { // Según la operación seleccionada
                case "Consulta todos los cuadros mostrando sus campos ordenandos por tipo.":
                    Query query = db.query();
                    query.constrain(Cuadro.class);
                    query.descend("tipo").orderAscending(); // Ordenar por el campo 'tipo'
                    ObjectSet<Cuadro> result = query.execute(); // Ejecutar la consulta

                    txtResultados.setText("");
                    if (!result.hasNext()) { // Si no hay cuadros en la base de datos
                        JOptionPane.showMessageDialog(null, "La base de datos está vacía.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    } else { // Si hay cuadros en la base de datos
                        while (result.hasNext()) { // Mostrar los cuadros
                            Cuadro cuadro = result.next(); // Obtener el cuadro
                            txtResultados.append(cuadro.toString() + "\n"); // Mostrar el cuadro
                        }
                    }
                    break; // Salir del switch
                case "Mostrar todos los cuadros de un determinado pintor.":
                    int idPintor = 0; // Identificador del pintor
                    if (!txtIdPintorCuadro.getText().equals("")) { // Si se ha introducido el id del pintor
                        idPintor = Integer.parseInt(txtIdPintorCuadro.getText()); // Obtener el id del pintor
                    } else if (!txtIdPintor.getText().equals("")) { // Si se ha introducido el id del pintor
                        idPintor = Integer.parseInt(txtIdPintor.getText()); // Obtener el id del pintor
                    } else { // Si no se ha introducido el id del pintor
                        txtResultados.setText("Falta el id del pintor por introducir");
                        break; // Salir del switch
                    }
                    Pintor pintor = getPintor(idPintor); // Obtener el pintor
                    if (pintor != null) { // Si el pintor existe
                        ObjectSet<Cuadro> result2 = db.queryByExample(new Cuadro(0, null, 0, null, null, pintor)); // Consultar los cuadros del pintor
                        txtResultados.setText("");
                        while (result2.hasNext()) { // Mostrar los cuadros
                            Cuadro cuadro = result2.next(); // Obtener el cuadro
                            txtResultados.append(cuadro.toString() + "\n"); // Mostrar el cuadro
                        }
                    } else { // Si el pintor no existe
                        txtResultados.setText("No existe un pintor con ese id");
                    }
                    break; // Salir del switch
                case "Mostrar todos los cuadros de pintores de una nacionalidad determinada.":
                    if (txtNacionalidad.getText().equalsIgnoreCase("")) { // Si no se ha introducido la nacionalidad
                        txtResultados.setText("Falta la nacionalidad por introducir");
                    } else { // Si se ha introducido la nacionalidad
                        String nacionalidad = txtNacionalidad.getText(); // Obtener la nacionalidad
                        ObjectSet<Pintor> result3 = db.queryByExample(new Pintor(0, null, nacionalidad, 0, null)); // Consultar los pintores de la nacionalidad
                        txtResultados.setText("");
                        while (result3.hasNext()) { // Mostrar los cuadros
                            Pintor pintor1 = result3.next(); // Obtener el pintor
                            ObjectSet<Cuadro> result4 = db.queryByExample(new Cuadro(0, null, 0, null, null, pintor1)); // Consultar los cuadros del pintor
                            while (result4.hasNext()) { // Mostrar los cuadros
                                Cuadro cuadro = result4.next(); // Obtener el cuadro
                                txtResultados.append(cuadro.toString() + "\n"); // Mostrar el cuadro
                            }
                        }
                    }
                    break; // Salir del switch
                case "Pedir dos precios y consultar los cuadros cuyo valor se encuentre entre los precios introducidos.":
                    JOptionPane.showMessageDialog(null, "Introduce dos precios"); // Mostrar mensaje
                    double precio1 = Double.parseDouble(JOptionPane.showInputDialog("Introduce el primer precio")); // Pedir el primer precio
                    double precio2 = Double.parseDouble(JOptionPane.showInputDialog("Introduce el segundo precio")); // Pedir el segundo precio
                    if (precio1 > precio2) { // Si el primer precio es mayor que el segundo
                        JOptionPane.showMessageDialog(null, "Los precios introducidos están fuera de rango.", "Error", JOptionPane.ERROR_MESSAGE);
                    } else { // Si el primer precio es menor que el segundo
                        Query query1 = db.query(); // Consultar los cuadros cuyo precio se encuentre entre los precios introducidos
                        query1.constrain(Cuadro.class); // Clase a consultar
                        query1.descend("precio").constrain(precio1).greater().and(query1.descend("precio").constrain(precio2).smaller()); // Restricciones
                        ObjectSet<Cuadro> result5 = query1.execute(); // Ejecutar la consulta
                        txtResultados.setText("");
                        if (!result5.hasNext()) { // Si no hay cuadros en el rango de precios
                            JOptionPane.showMessageDialog(null, "La base de datos está vacía o no hay cuadros en el rango de precios introducido.", "Información", JOptionPane.INFORMATION_MESSAGE);
                        } else { // Si hay cuadros en el rango de precios
                            while (result5.hasNext()) { // Mostrar los cuadros
                                Cuadro cuadro = result5.next(); // Obtener el cuadro
                                txtResultados.append(cuadro.toString() + "\n"); // Mostrar el cuadro
                            }
                        }
                    }
                    break; // Salir del switch
                case "Aumenta los precios de todos los cuadros en un 10%.":
                    ObjectSet<Cuadro> result6 = db.query(Cuadro.class); // Consultar todos los cuadros
                    while (result6.hasNext()) { // Aumentar los precios de los cuadros
                        Cuadro cuadro = result6.next(); // Obtener el cuadro
                        cuadro.setPrecio(cuadro.getPrecio() * 1.10); // Aumentar el precio del cuadro
                        db.store(cuadro); // Almacenar el cuadro en la base de datos
                    }
                    db.commit(); // Confirmar la transacción
                    txtResultados.setText("Precios actualizados correctamente");
                    break; // Salir del switch
            }
        } catch (NumberFormatException e) { // Si se produce una excepción de tipo NumberFormatException
            txtResultados.setText("Error: los datos introducidos no son válidos.");
            db.rollback();  // Deshacer la transacción
        } catch (Exception e) { // Si se produce una excepción de otro tipo
            txtResultados.setText("Error: " + e.getMessage());
            db.rollback(); // Deshacer la transacción
        } finally {
            db.close(); // Cerrar la base de datos
        }
    }

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // Limpiar los campos
            int response = JOptionPane.showConfirmDialog(null, "¿Desea borrar todos los datos introducidos?", "Cancelar", JOptionPane.YES_NO_OPTION); // Mostrar mensaje
            // Si se pulsa el botón "Sí", limpiar los campos
            if (response == JOptionPane.YES_OPTION) {
                txtNumCatalogo.setText("");
                txtTitulo.setText("");
                txtPrecio.setText("");
                txtEstado.setText("");
                txtTipo.setText("");
                txtIdPintorCuadro.setText("");
                txtIdPintor.setText("");
                txtNombre.setText("");
                txtNacionalidad.setText("");
                txtAnioNacim.setText("");
                txtEstilo.setText("");
                txtResultados.setText("");
            }
        } catch (Exception e) { // Si se produce una excepción
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {
        // Mostrar mensaje
        int response = JOptionPane.showConfirmDialog(null, "¿Desea salir de la aplicación?", "Salir", JOptionPane.YES_NO_OPTION); // Mostrar mensaje
        // Si se pulsa el botón "Sí", cerrar la base de datos y salir de la aplicación
        if (response == JOptionPane.YES_OPTION) {
            try {
                db.close(); // Cerrar la base de datos
            } catch (Exception e) { // Si se produce una excepción
                JOptionPane.showMessageDialog(null, "Error al cerrar la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            System.exit(0); // Salir de la aplicación
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPinacoteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPinacoteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPinacoteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPinacoteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPinacoteca().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnAgregarCuadro;
    public javax.swing.JButton btnAgregarPintor;
    public javax.swing.JButton btnCancelar;
    public javax.swing.JButton btnEliminarCuadro;
    public javax.swing.JButton btnEliminarPintor;
    public javax.swing.JButton btnRealizarOperacion;
    public javax.swing.JButton btnSalir;
    public javax.swing.JComboBox<String> jComboBoxOperaciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextField txtAnioNacim;
    public javax.swing.JTextField txtEstado;
    public javax.swing.JTextField txtEstilo;
    public javax.swing.JTextField txtIdPintor;
    public javax.swing.JTextField txtIdPintorCuadro;
    public javax.swing.JTextField txtNacionalidad;
    public javax.swing.JTextField txtNombre;
    public javax.swing.JTextField txtNumCatalogo;
    public javax.swing.JTextField txtPrecio;
    public javax.swing.JTextArea txtResultados;
    public javax.swing.JTextField txtTipo;
    public javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
}
